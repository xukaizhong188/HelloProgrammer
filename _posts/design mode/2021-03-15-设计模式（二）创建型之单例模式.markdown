---
layout: post
title: 设计模式（二）创建型之单例模式!
date:  2021-03-15
Author: XKZ
categories: jekyll update
tags: [设计模式]
comments: true
---
## 1、定义
指一个类只有一个实例，且该类能自行创建这个实例的一种模式。
### 特点
单例类只有一个实例对象；   
该单例对象必须由单例类自行创建；    
单例类对外提供一个访问该单例的全局访问点。    
## 2、优点
单例模式可以保证内存里只有一个实例，减少了内存的开销。     
可以避免对资源的多重占用。   
单例模式设置全局访问点，可以优化和共享资源的访问。
## 3、缺点
单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。    
在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。   
单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。  
## 4、应用场景
需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少 GC。    
某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。   
某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用。    
某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。    
频繁访问数据库或文件的对象。    
对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。   
当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。   
## 5、实现
### 5.1、饿汉式

    public class HungrySingleton {
        private static final HungrySingleton instance = new HungrySingleton();
        private HungrySingleton() {
        }
        public static HungrySingleton getInstance() {
            return instance;
        }
    }

恶汉式因为在类加载的时候就会创建实例，所以它是线程安全的。
### 5.2、懒汉式-线程不安全

    public class Singleton {  
    private static Singleton instance;  
    private Singleton (){}
    
        public static Singleton getInstance() {  
        if (instance == null) {  
            instance = new Singleton();  
        }  
        return instance;  
        }  
    }

### 5.3、懒汉式-线程安全
方式一：在方法上加锁

    public class LazySingleton {
        private static volatile LazySingleton instance = null;    //保证 instance 在所有线程中同步
    
        private LazySingleton() {
        }    //private 避免类在外部被实例化
    
        public static synchronized LazySingleton getInstance() {
            //getInstance 方法前加同步
            if (instance == null) {
                instance = new LazySingleton();
            }
            return instance;
        }
    }

方式二:双重校验锁
    
    public class LazySingleton {
        private static volatile LazySingleton lazySingleton ;
        private LazySingleton(){
            System.out.println("懒汉对象生成了。。。");
        }
        public static LazySingleton getInstance() {
            if (lazySingleton == null) {  
                synchronized (LazySingleton.class) {  
                    if (lazySingleton == null) {  
                        lazySingleton = new LazySingleton();
                    }  
                }  
            }  
            return lazySingleton;
        }
    }

注意：volatile关键字不能少(防止jvm指令重排)
因为 lazySingleton = new LazySingleton() 这句话可以分为三步：    
1. 为 lazySingleton 分配内存空间；   
2. 初始化 lazySingleton；   
3. 将 lazySingleton 指向分配的内存空间。   
但是由于JVM具有指令重排的特性，执行顺序有可能变成 1-3-2。指令重排在单线程下不会出现问题，但是在多线程下会导致一个线程获得一个未初始化的实例。例如：线程T1执行了1和3，此时T2调用 getInstance() 后发现 singleton 不为空，因此返回 singleton， 但是此时的 singleton 还没有被初始化，使用 volatile 会禁止JVM指令重排，从而保证在多线程下也能正常执行。

方式三：静态内部类

    public class Singleton {  
        private static class LazyHolder {  
            private static final Singleton INSTANCE = new Singleton();  
        }  
        private Singleton (){}  
        public static final Singleton getInstance() {  
            return LazyHolder.INSTANCE;  
        }  
    }

### 5.4、静态代码块：
在类加载的时候完成初始化，所以是线程安全的

    public class MyObject6 {
        private static MyObject6 instance = null;
        private MyObject6() {}
        static {
            instance = new MyObject6();
        }
        public static MyObject6 getInstance() {
            return instance;
        }
    }

### 5.5、使用enum枚举
JVM会保证enum不能被反射并且构造器方法只执行一次,因此该单例是线程安全的。

    public class MyObject7 {
        private enum MyEnumSingleton {
            enumFactory;
            private MyObject7 myObject7;
            private MyEnumSingleton() {
                myObject7 = new MyObject7();
            }
            public MyObject7 getInstance() {
                return myObject7;
            }
        }
        public static MyObject7 getInstance() {
            return MyEnumSingleton.enumFactory.getInstance();
        }
    }

### 5.6、饿汉式和懒汉式区别
饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，   
而懒汉比较懒，只有当用户调用getInstance的时候，才回去初始化这个单例。   
1、线程安全：  
饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，   
懒汉式本身是非线程安全的，但是为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。   
2、资源加载和性能：    
饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，   
而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。   
第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会极大的影响性能，毕竟99%的情况下是不需要同步的，   
第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗，这种相较于第一种性能提高了很多  
第3种，利用了classloader（类加载）的机制来保证在类变成class字节码文件的之后就已经执行了静态代码块里面的内容了，这样也能保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以性能最高的也就是这一种了。但是会造成   

### 5.7、序列化对单例模式的破坏
在反序列化时，会通过反射调用无参的构造方法，这样就会创建一个新对象从而造成对单例模式的破坏反序列化操作提供了readResolve方法，
这个方法可以让开发人员控制对象的反序列化。在上述的几个方法示例中如果要杜绝单例对象被反序列化是重新生成对象，就必须加入如下方法：

    private Object readResolve() throws ObjectStreamException{
        return singleton;
    }

[参考：设计模式-建造者模式](http://c.biancheng.net/view/1354.html "建造者模式").
