---
layout: post
title: 设计模式（二）创建型之抽象工厂模式!
date:  2021-03-15
Author: XKZ
categories: jekyll update
tags: [设计模式]
comments: true
---
前面讲到的工厂方法模式是对一类的产品进行创建，但是在现实生活中，不止有一类的产品，而是综合性的工厂。
## 1、抽象工厂的定义
抽象工厂是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。
## 2、抽象工厂的特点
抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。
## 3、使用条件
系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。   
系统一次只可能消费其中某一族产品，即同族的产品一起使用。
## 4、优缺点
### 优点
可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。    
当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组。   
抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。   
### 缺点
当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。
## 5、代码示例
抽象工厂模式的结构同工厂方法模式的结构相似，不同的是其产品的种类不止一个，所以创建产品的方法也不止一个。下面给出抽象工厂和具体工厂的代码。

(1) 抽象工厂：提供了产品的生成方法。

    interface AbstractFactory {
        public Product1 newProduct1();
        public Product2 newProduct2();
    }

(2) 具体工厂：实现了产品的生成方法。

    class ConcreteFactory1 implements AbstractFactory {
        public Product1 newProduct1() {
            System.out.println("具体工厂 1 生成-->具体产品 11...");
            return new ConcreteProduct11();
        }
        public Product2 newProduct2() {
            System.out.println("具体工厂 1 生成-->具体产品 21...");
            return new ConcreteProduct21();
        }
    }

[参考：设计模式-抽象工厂模式](http://c.biancheng.net/view/1351.html "抽象工厂模式").
