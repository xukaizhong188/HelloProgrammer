---
layout: post
title: 代码整洁之道!
date:  2019-09-07
Author: XKZ
categories: jekyll update
tags: [clean code]
comments: true
---
## 一、代码整洁的重要性
案例一：
20世纪80年代末，有家公司写了一个流行的应用，当时有很多专业人士购买使用这个软件，然后发布周期变长，缺陷也很难修复，装载时间变长，崩溃几率也变长，后来这家公司倒闭了，事后，从这家公司的员工口中得知，当时公司为了退出产品，代码越来越乱，直到代码无法管理。
案例二：
最近刚从其他团队交接来一个项目，再熟悉代码的过程中发现代码非常杂乱，一个方法能够写到1000+行，对于逻辑的梳理产生了很大的阻碍。
由此可见，整洁的代码，能够使得项目更好的管理，在阅读和理解方面也能够更加的方便，很多同事都会经历的一件事情就是在看自己一个月前的代码，都不知道当初为什么这么写。更不要说积累了很长时间的代码。
## 二、如何写出整洁的代码
![img](https://xukaizhong188.github.io/HelloProgrammer/images/2019-09-07/image7.png)
### 1、函数
#### a、短小
函数的编写第一规则就是短小，第二规则还是短小
短小的标准：
撑起一屏幕，20行封顶最佳
如何做到短小：
对于代码块，像If语句、else语句、while语句等，其中里面的代码块应该是只有一行，这一行应该是一个函数调用语句，不但能保持函数的短小，而且对块内的函数具有较具说明性的东西。
对于缩进，函数的缩进层级不应该多余一层或者两层，这样的函数容易阅读和理解的。
#### b、只做一件事
判断一个函数是否只做了一件事，小技巧就是判断这个函数里的逻辑是否还能拆一个函数，在写完一个方法的时候要考虑我们这个方法是否还能再拆除一个方法。
#### c、每一个函数都是一个抽象层
判断一个函数是否只做了一件事另一个方法就是判断一个方法是否只是一个抽象层。
例如：之前写过一个方法，逻辑大致是这样的需要获取订单的配送时间，不同的配送方式是不一样的，在某中配送方式下，不同商品也是不一样的，这个方法处理完大概也就20行，已经很短小了，但是这个函数并不在一个抽象层级，我们可以按照处理配送时间划分为一个抽象层，可以按照配送方式作为一个抽象层，在配送方式的基础上还可以按照商品维度划分为一个抽象层。这样细分下来，这个函数可以拆分为3个抽象层，改造后的代码每个函数也就几行，阅读起来也非常易懂。
#### d、switch语句
写出短小的switch语句很难，因为switch本身就要做N多事情，我们只能尽可能的保证每个switch都埋藏在较低的抽象层级别。而且永远不重复，我们可以利用多态来实现，采用简单工厂的设计模式。
这里要提一下设计模式，根据自身的特性选择好的设计模式是非常有比较的，这样不仅能有利于代码的扩展性，对于阅读也有很大的益处。
#### e、使用描述性的名称
函数名称要通俗易懂，避免令人费解,及时我们的函数名很长也不要紧，毕竟通俗的名称要优于难懂。
#### f、函数参数
函数参数最理想的个数是0个，其次是1个，再次是2个，避免三个及三个以上，多余3个的尽量可以采用定义对象的方式来处理。
（虽然定义对象也会耗费一些性能）
#### g、使用异常来代替错误返回码
### 2、错误处理
#### a、使用异常来代替错误返回码
返回码的弊端：
1)、通常来讲我们定义错误返回码会有一个单独的枚举类，而且这样的类通常也会在多处调用，所以，一旦这个类发生变化，那就意味着调用这个类的所有方法及类都需要重新编译及部署，而使用异常我们对于任何修改我们只需要派生Exception来即可，对旧的使用者来说不需要改变，新的调用者只需要使用新派生的Exception。
2)、使用返回码的另一弊端就是对于调用者使用非常的不方便。通常调用者会对错误码进行大量的判断，这样的代码维护起来也很不便，就想这样：
        Result result = XXRpc.getXXInfo();
        if (result.getCode.equals(Success)){
            .........
        }
        if (result.getCode.equals(System Error)){
            .........
        }
如果我们使用异常我们只需要对调用的方法，进行检查是否异常，便可以获取到我们想要的结果。
#### b、抽离try/catch
在使用异常代替返回码的时候我们一定要将try/catch从我们代码的主路径进行抽离，使我们的代码得到简化，因为这样的结构会破坏我们代码的整体布局。
#### c、先写try/catch
异常的妙处之一是，它们在程序中定义了一个范围。执行 try-catch-finally 语句中 try 部分的代码时，你是在表明可随时取消执行，并在 catch 语句中接续。　　在某种意义上，try 代码块就像是事务。 catch 代码块将程序维持在一种持续状态，无论 try 代码块中发生了什么均如此。
所以，在编写可能抛出异常的代码时，最好先写出 try-catch-finally 语句。这能帮你定义代码的用户应该期待什么，无论 try 代码块中执行的代码出什么错都一样。
#### d、别写null
返回 null 值容易引发错误，无处不在的空指针。　　如果打算在方法中返回 null 值，不如抛出异常，或是返回特例对象。如果在调用某个第三方 API 中可能返回 null 值的方法，可以考虑用新方法打包这个方法，在新方法中抛出异常或返回特例对象。 
做到不返回的同时不要忘记更不要传递null,除非api允许，否则尽可能避免