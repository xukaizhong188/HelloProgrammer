---
layout: post
title: JVM指令集
date:  2020-11-21
Author: XKZ
categories: jekyll update
tags: [JVM]
comments: true
---
指令码 助记符    说明
0x00 nop      什么都不做  
0x01 aconst_null 将null推送至栈顶  
0x02 iconst_m1   将int型-1推送至栈顶  
0x03 iconst_0   将int型0推送至栈顶   
0x04 iconst_1   将int型1推送至栈顶  
0x05 iconst_2   将int型2推送至栈顶  
0x06 iconst_3   将int型3推送至栈顶  
0x07 iconst_4   将int型4推送至栈顶  
0x08 iconst_5   将int型5推送至栈顶  
0x09 lconst_0   将long型0推送至栈顶  
0x0a lconst_1   将long型1推送至栈顶  
0x0b fconst_0   将float型0推送至栈顶  
0x0c fconst_1   将float型1推送至栈顶  
0x0d fconst_2   将float型2推送至栈顶  
0x0e dconst_0   将double型0推送至栈顶  
0x0f dconst_1   将double型1推送至栈顶  
0x10 bipush    将单字节的常量值(-128~127)推送至栈顶  
0x11 sipush    将一个短整型常量值(-32768~32767)推送至栈顶  
0x12 ldc      将int, float或String型常量值从常量池中推送至栈顶  
0x13 ldc_w     将int, float或String型常量值从常量池中推送至栈顶（宽索引）  
0x14 ldc2_w    将long或double型常量值从常量池中推送至栈顶（宽索引）  
0x15 iload     将指定的int型本地变量推送至栈顶  
0x16 lload     将指定的long型本地变量推送至栈顶  
0x17 fload     将指定的float型本地变量推送至栈顶  
0x18 dload     将指定的double型本地变量推送至栈顶  
0x19 aload     将指定的引用类型本地变量推送至栈顶  
0x1a iload_0    将第一个int型本地变量推送至栈顶  
0x1b iload_1    将第二个int型本地变量推送至栈顶  
0x1c iload_2    将第三个int型本地变量推送至栈顶  
0x1d iload_3    将第四个int型本地变量推送至栈顶  
0x1e lload_0    将第一个long型本地变量推送至栈顶  
0x1f lload_1    将第二个long型本地变量推送至栈顶  
0x20 lload_2    将第三个long型本地变量推送至栈顶  
0x21 lload_3    将第四个long型本地变量推送至栈顶  
0x22 fload_0    将第一个float型本地变量推送至栈顶  
0x23 fload_1    将第二个float型本地变量推送至栈顶  
0x24 fload_2    将第三个float型本地变量推送至栈顶  
0x25 fload_3    将第四个float型本地变量推送至栈顶  
0x26 dload_0    将第一个double型本地变量推送至栈顶  
0x27 dload_1    将第二个double型本地变量推送至栈顶  
0x28 dload_2    将第三个double型本地变量推送至栈顶  
0x29 dload_3    将第四个double型本地变量推送至栈顶  
0x2a aload_0    将第一个引用类型本地变量推送至栈顶  
0x2b aload_1    将第二个引用类型本地变量推送至栈顶  
0x2c aload_2    将第三个引用类型本地变量推送至栈顶  
0x2d aload_3    将第四个引用类型本地变量推送至栈顶  
0x2e iaload    将int型数组指定索引的值推送至栈顶  
0x2f laload    将long型数组指定索引的值推送至栈顶  
0x30 faload    将float型数组指定索引的值推送至栈顶  
0x31 daload    将double型数组指定索引的值推送至栈顶  
0x32 aaload    将引用型数组指定索引的值推送至栈顶  
0x33 baload    将boolean或byte型数组指定索引的值推送至栈顶  
0x34 caload    将char型数组指定索引的值推送至栈顶  
0x35 saload    将short型数组指定索引的值推送至栈顶  
0x36 istore    将栈顶int型数值存入指定本地变量  
0x37 lstore    将栈顶long型数值存入指定本地变量  
0x38 fstore    将栈顶float型数值存入指定本地变量  
0x39 dstore    将栈顶double型数值存入指定本地变量  
0x3a astore    将栈顶引用型数值存入指定本地变量  
0x3b istore_0   将栈顶int型数值存入第一个本地变量  
0x3c istore_1   将栈顶int型数值存入第二个本地变量  
0x3d istore_2   将栈顶int型数值存入第三个本地变量  
0x3e istore_3   将栈顶int型数值存入第四个本地变量  
0x3f lstore_0   将栈顶long型数值存入第一个本地变量  
0x40 lstore_1   将栈顶long型数值存入第二个本地变量  
0x41 lstore_2   将栈顶long型数值存入第三个本地变量  
0x42 lstore_3   将栈顶long型数值存入第四个本地变量  
0x43 fstore_0   将栈顶float型数值存入第一个本地变量  
0x44 fstore_1   将栈顶float型数值存入第二个本地变量  
0x45 fstore_2   将栈顶float型数值存入第三个本地变量  
0x46 fstore_3   将栈顶float型数值存入第四个本地变量  
0x47 dstore_0   将栈顶double型数值存入第一个本地变量  
0x48 dstore_1   将栈顶double型数值存入第二个本地变量  
0x49 dstore_2   将栈顶double型数值存入第三个本地变量  
0x4a dstore_3   将栈顶double型数值存入第四个本地变量  
0x4b astore_0   将栈顶引用型数值存入第一个本地变量  
0x4c astore_1   将栈顶引用型数值存入第二个本地变量  
0x4d astore_2   将栈顶引用型数值存入第三个本地变量  
0x4e astore_3   将栈顶引用型数值存入第四个本地变量  
0x4f iastore    将栈顶int型数值存入指定数组的指定索引位置  
0x50 lastore    将栈顶long型数值存入指定数组的指定索引位置  
0x51 fastore    将栈顶float型数值存入指定数组的指定索引位置  
0x52 dastore    将栈顶double型数值存入指定数组的指定索引位置  
0x53 aastore    将栈顶引用型数值存入指定数组的指定索引位置  
0x54 bastore    将栈顶boolean或byte型数值存入指定数组的指定索引位置   
0x55 castore    将栈顶char型数值存入指定数组的指定索引位置   
0x56 sastore    将栈顶short型数值存入指定数组的指定索引位置   
0x57 pop      将栈顶数值弹出 (数值不能是long或double类型的)  
0x58 pop2     将栈顶的一个（long或double类型的)或两个数值弹出（其它）  
0x59 dup      复制栈顶数值并将复制值压入栈顶  
0x5a dup_x1    复制栈顶数值并将两个复制值压入栈顶  
0x5b dup_x2    复制栈顶数值并将三个（或两个）复制值压入栈顶  
0x5c dup2     复制栈顶一个（long或double类型的)或两个（其它）数值并将复制值压入栈顶  
0x5d dup2_x1    <待补充>    
0x5e dup2_x2    <待补充>     
0x5f swap     将栈最顶端的两个数值互换(数值不能是long或double类型的)    
0x60 iadd     将栈顶两int型数值相加并将结果压入栈顶    
0x61 ladd     将栈顶两long型数值相加并将结果压入栈顶        
0x62 fadd     将栈顶两float型数值相加并将结果压入栈顶     
0x63 dadd     将栈顶两double型数值相加并将结果压入栈顶      
0x64 isub     将栈顶两int型数值相减并将结果压入栈顶    
0x65 lsub     将栈顶两long型数值相减并将结果压入栈顶    
0x66 fsub     将栈顶两float型数值相减并将结果压入栈顶  
0x67 dsub     将栈顶两double型数值相减并将结果压入栈顶  
0x68 imul     将栈顶两int型数值相乘并将结果压入栈顶   
0x69 lmul     将栈顶两long型数值相乘并将结果压入栈顶  
0x6a fmul     将栈顶两float型数值相乘并将结果压入栈顶  
0x6b dmul     将栈顶两double型数值相乘并将结果压入栈顶  
0x6c idiv     将栈顶两int型数值相除并将结果压入栈顶  
0x6d ldiv     将栈顶两long型数值相除并将结果压入栈顶  
0x6e fdiv     将栈顶两float型数值相除并将结果压入栈顶  
0x6f ddiv     将栈顶两double型数值相除并将结果压入栈顶  
0x70 irem     将栈顶两int型数值作取模运算并将结果压入栈顶  
0x71 lrem     将栈顶两long型数值作取模运算并将结果压入栈顶  
0x72 frem     将栈顶两float型数值作取模运算并将结果压入栈顶  
0x73 drem     将栈顶两double型数值作取模运算并将结果压入栈顶  
0x74 ineg     将栈顶int型数值取负并将结果压入栈顶  
0x75 lneg     将栈顶long型数值取负并将结果压入栈顶  
0x76 fneg     将栈顶float型数值取负并将结果压入栈顶  
0x77 dneg     将栈顶double型数值取负并将结果压入栈顶  
0x78 ishl     将int型数值左移位指定位数并将结果压入栈顶  
0x79 lshl     将long型数值左移位指定位数并将结果压入栈顶  
0x7a ishr     将int型数值右（符号）移位指定位数并将结果压入栈顶  
0x7b lshr     将long型数值右（符号）移位指定位数并将结果压入栈顶  
0x7c iushr     将int型数值右（无符号）移位指定位数并将结果压入栈顶  
0x7d lushr     将long型数值右（无符号）移位指定位数并将结果压入栈顶  
0x7e iand     将栈顶两int型数值作“按位与”并将结果压入栈顶  
0x7f land     将栈顶两long型数值作“按位与”并将结果压入栈顶  
0x80 ior      将栈顶两int型数值作“按位或”并将结果压入栈顶  
0x81 lor      将栈顶两long型数值作“按位或”并将结果压入栈顶  
0x82 ixor     将栈顶两int型数值作“按位异或”并将结果压入栈顶  
0x83 lxor     将栈顶两long型数值作“按位异或”并将结果压入栈顶  
0x84 iinc     将指定int型变量增加指定值（i++, i--, i+=2）  
0x85 i2l      将栈顶int型数值强制转换成long型数值并将结果压入栈顶  
0x86 i2f      将栈顶int型数值强制转换成float型数值并将结果压入栈顶  
0x87 i2d      将栈顶int型数值强制转换成double型数值并将结果压入栈顶  
0x88 l2i      将栈顶long型数值强制转换成int型数值并将结果压入栈顶  
0x89 l2f      将栈顶long型数值强制转换成float型数值并将结果压入栈顶  
0x8a l2d      将栈顶long型数值强制转换成double型数值并将结果压入栈顶  
0x8b f2i      将栈顶float型数值强制转换成int型数值并将结果压入栈顶  
0x8c f2l      将栈顶float型数值强制转换成long型数值并将结果压入栈顶  
0x8d f2d      将栈顶float型数值强制转换成double型数值并将结果压入栈顶  
0x8e d2i      将栈顶double型数值强制转换成int型数值并将结果压入栈顶  
0x8f d2l      将栈顶double型数值强制转换成long型数值并将结果压入栈顶  
0x90 d2f      将栈顶double型数值强制转换成float型数值并将结果压入栈顶  
0x91 i2b      将栈顶int型数值强制转换成byte型数值并将结果压入栈顶  
0x92 i2c      将栈顶int型数值强制转换成char型数值并将结果压入栈顶  
0x93 i2s      将栈顶int型数值强制转换成short型数值并将结果压入栈顶  
0x94 lcmp     比较栈顶两long型数值大小，并将结果（1，0，-1）压入栈顶  
0x95 fcmpl     比较栈顶两float型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将-1压入栈顶  
0x96 fcmpg     比较栈顶两float型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将1压入栈顶  
0x97 dcmpl     比较栈顶两double型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将-1压入栈顶  
0x98 dcmpg     比较栈顶两double型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将1压入栈顶  
0x99 ifeq     当栈顶int型数值等于0时跳转  
0x9a ifne     当栈顶int型数值不等于0时跳转  
0x9b iflt     当栈顶int型数值小于0时跳转  
0x9c ifge     当栈顶int型数值大于等于0时跳转  
0x9d ifgt     当栈顶int型数值大于0时跳转  
0x9e ifle     当栈顶int型数值小于等于0时跳转  
0x9f if_icmpeq   比较栈顶两int型数值大小，当结果等于0时跳转  
0xa0 if_icmpne   比较栈顶两int型数值大小，当结果不等于0时跳转  
0xa1 if_icmplt   比较栈顶两int型数值大小，当结果小于0时跳转  
0xa2 if_icmpge   比较栈顶两int型数值大小，当结果大于等于0时跳转  
0xa3 if_icmpgt   比较栈顶两int型数值大小，当结果大于0时跳转  
0xa4 if_icmple   比较栈顶两int型数值大小，当结果小于等于0时跳转  
0xa5 if_acmpeq   比较栈顶两引用型数值，当结果相等时跳转  
0xa6 if_acmpne   比较栈顶两引用型数值，当结果不相等时跳转  
0xa7 goto     无条件跳转  
0xa8 jsr      跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶  
0xa9 ret      返回至本地变量指定的index的指令位置（一般与jsr, jsr_w联合使用）  
0xaa tableswitch    用于switch条件跳转，case值连续（可变长度指令）  
0xab lookupswitch   用于switch条件跳转，case值不连续（可变长度指令）  
0xac ireturn    从当前方法返回int  
0xad lreturn    从当前方法返回long  
0xae freturn    从当前方法返回float  
0xaf dreturn    从当前方法返回double  
0xb0 areturn    从当前方法返回对象引用  
0xb1 return    从当前方法返回void  
0xb2 getstatic   获取指定类的静态域，并将其值压入栈顶  
0xb3 putstatic   为指定的类的静态域赋值  
0xb4 getfield   获取指定类的实例域，并将其值压入栈顶  
0xb5 putfield   为指定的类的实例域赋值  
0xb6 invokevirtual   调用实例方法  
0xb7 invokespecial   调用超类构造方法，实例初始化方法，私有方法  
0xb8 invokestatic   调用静态方法  
0xb9 invokeinterface 调用接口方法  
0xba --  
0xbb new      创建一个对象，并将其引用值压入栈顶  
0xbc newarray   创建一个指定原始类型（如int, float, char…）的数组，并将其引用值压入栈顶    
0xbd anewarray   创建一个引用型（如类，接口，数组）的数组，并将其引用值压入栈顶    
0xbe arraylength 获得数组的长度值并压入栈顶    
0xbf athrow    将栈顶的异常抛出   
0xc0 checkcast   检验类型转换，检验未通过将抛出ClassCastException  
0xc1 instanceof 检验对象是否是指定的类的实例，如果是将1压入栈顶，否则将0压入栈顶  
0xc2 monitorenter   获得对象的锁，用于同步方法或同步块  
0xc3 monitorexit    释放对象的锁，用于同步方法或同步块  
0xc4 wide     <待补充>  
0xc5 multianewarray 创建指定类型和指定维度的多维数组（执行该指令时，操作栈中必须包含各维度的长度值），并将其引用值压入栈顶  
0xc6 ifnull    为null时跳转  
0xc7 ifnonnull   不为null时跳转  
0xc8 goto_w    无条件跳转（宽索引）  
0xc9 jsr_w     跳转至指定32位offset位置，并将jsr_w下一条指令地址压入栈顶  





栈和局部变量操作      
将常量压入栈的指令      
aconst_null 将null对象引用压入栈      
iconst_m1 将int类型常量-1压入栈      
iconst_0 将int类型常量0压入栈      
iconst_1 将int类型常量1压入操作数栈      
iconst_2 将int类型常量2压入栈      
iconst_3 将int类型常量3压入栈      
iconst_4 将int类型常量4压入栈      
iconst_5 将int类型常量5压入栈      
lconst_0 将long类型常量0压入栈      
lconst_1 将long类型常量1压入栈      
fconst_0 将float类型常量0压入栈      
fconst_1 将float类型常量1压入栈      
dconst_0 将double类型常量0压入栈      
dconst_1 将double类型常量1压入栈      
bipush 将一个8位带符号整数压入栈      
sipush 将16位带符号整数压入栈      
ldc 把常量池中的项压入栈      
ldc_w 把常量池中的项压入栈(使用宽索引)      
ldc2_w 把常量池中long类型或者double类型的项压入栈(使用宽索引) 从栈中的局部变量中装载值的指令      
iload 从局部变量中装载int类型值      
lload 从局部变量中装载long类型值      
fload 从局部变量中装载float类型值      
dload 从局部变量中装载double类型值      
aload 从局部变量中装载引用类型值(refernce)      
iload_0 从局部变量0中装载int类型值      
iload_1 从局部变量1中装载int类型值      
iload_2 从局部变量2中装载int类型值      
iload_3 从局部变量3中装载int类型值      
lload_0 从局部变量0中装载long类型值      
lload_1 从局部变量1中装载long类型值      
lload_2 从局部变量2中装载long类型值      
lload_3 从局部变量3中装载long类型值      
fload_0 从局部变量0中装载float类型值      
fload_1 从局部变量1中装载float类型值      
       
 fload_2 从局部变量2中装载float类型值 fload_3 从局部变量3中装载float类型值 dload_0 从局部变量0中装载double类型值 dload_1 从局部变量1中装载double类型值 dload_2 从局部变量2中装载double类型值 dload_3 从局部变量3中装载double类型值 aload_0 从局部变量0中装载引用类型值 aload_1 从局部变量1中装载引用类型值 aload_2 从局部变量2中装载引用类型值 aload_3 从局部变量3中装载引用类型值 iaload 从数组中装载int类型值      
laload 从数组中装载long类型值      
faload 从数组中装载float类型值      
daload 从数组中装载double类型值      
aaload 从数组中装载引用类型值      
baload 从数组中装载byte类型或boolean类型值 caload 从数组中装载char类型值      
saload 从数组中装载short类型值 将栈中的值存入局部变量的指令      
istore 将int类型值存入局部变量      
lstore 将long类型值存入局部变量      
fstore 将float类型值存入局部变量      
dstore 将double类型值存入局部变量      
astore 将将引用类型或returnAddress类型值存入局部变量 istore_0 将int类型值存入局部变量0      
istore_1 将int类型值存入局部变量1 istore_2 将int类型值存入局部变量2 istore_3 将int类型值存入局部变量3 lstore_0 将long类型值存入局部变量0 lstore_1 将long类型值存入局部变量1 lstore_2 将long类型值存入局部变量2 lstore_3 将long类型值存入局部变量3 fstore_0 将float类型值存入局部变量0 fstore_1 将float类型值存入局部变量1 fstore_2 将float类型值存入局部变量2 fstore_3 将float类型值存入局部变量3 dstore_0 将double类型值存入局部变量0 dstore_1 将double类型值存入局部变量1      

       dstore_2 将double类型值存入局部变量2      
dstore_3 将double类型值存入局部变量3      
astore_0 将引用类型或returnAddress类型值存入局部变量0      
astore_1 将引用类型或returnAddress类型值存入局部变量1      
astore_2 将引用类型或returnAddress类型值存入局部变量2      
astore_3 将引用类型或returnAddress类型值存入局部变量3      
iastore 将int类型值存入数组中      
lastore 将long类型值存入数组中      
fastore 将float类型值存入数组中      
dastore 将double类型值存入数组中      
aastore 将引用类型值存入数组中      
bastore 将byte类型或者boolean类型值存入数组中      
castore 将char类型值存入数组中      
sastore 将short类型值存入数组中      
wide指令      
wide 使用附加字节扩展局部变量索引      
通用(无类型)栈操作      
nop 不做任何操作      
pop 弹出栈顶端一个字长的内容      
pop2 弹出栈顶端两个字长的内容      
dup 复制栈顶部一个字长内容      
dup_x1 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入 栈      
dup_x2 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入 栈      
dup2 复制栈顶部两个字长内容      
dup2_x1 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入 栈      
dup2_x2 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入 栈      
swap 交换栈顶部两个字长内容      
类型转换      
i2l 把int类型的数据转化为long类型      
i2f 把int类型的数据转化为float类型      
i2d 把int类型的数据转化为double类型      
l2i 把long类型的数据转化为int类型      
l2f 把long类型的数据转化为float类型      
l2d 把long类型的数据转化为double类型      

       f2i 把float类型的数据转化为int类型      
f2l 把float类型的数据转化为long类型      
f2d 把float类型的数据转化为double类型      
d2i 把double类型的数据转化为int类型      
d2l 把double类型的数据转化为long类型      
d2f 把double类型的数据转化为float类型      
i2b 把int类型的数据转化为byte类型      
i2c 把int类型的数据转化为char类型      
i2s 把int类型的数据转化为short类型      
整数运算      
iadd 执行int类型的加法      
ladd 执行long类型的加法      
isub 执行int类型的减法      
lsub 执行long类型的减法      
imul 执行int类型的乘法      
lmul 执行long类型的乘法      
idiv 执行int类型的除法      
ldiv 执行long类型的除法      
irem 计算int类型除法的余数      
lrem 计算long类型除法的余数      
ineg 对一个int类型值进行取反操作      
lneg 对一个long类型值进行取反操作      
iinc 把一个常量值加到一个int类型的局部变量上 逻辑运算      
移位操作      
ishl 执行int类型的向左移位操作      
lshl 执行long类型的向左移位操作      
ishr 执行int类型的向右移位操作      
lshr 执行long类型的向右移位操作      
iushr 执行int类型的向右逻辑移位操作      
lushr 执行long类型的向右逻辑移位操作 按位布尔运算      
iand 对int类型值进行“逻辑与”操作      
land 对long类型值进行“逻辑与”操作      
ior 对int类型值进行“逻辑或”操作      
lor 对long类型值进行“逻辑或”操作      
ixor 对int类型值进行“逻辑异或”操作      
lxor 对long类型值进行“逻辑异或”操作      

       浮点运算      
fadd 执行float类型的加法      
dadd 执行double类型的加法      
fsub 执行float类型的减法      
dsub 执行double类型的减法      
fmul 执行float类型的乘法      
dmul 执行double类型的乘法      
fdiv 执行float类型的除法      
ddiv 执行double类型的除法      
frem 计算float类型除法的余数      
drem 计算double类型除法的余数      
fneg 将一个float类型的数值取反      
dneg 将一个double类型的数值取反      
对象和数组      
对象操作指令      
new 创建一个新对象      
checkcast 确定对象为所给定的类型      
getfield 从对象中获取字段      
putfield 设置对象中字段的值      
getstatic 从类中获取静态字段      
putstatic 设置类中静态字段的值      
instanceof 判断对象是否为给定的类型      
数组操作指令      
newarray 分配数据成员类型为基本上数据类型的新数组 anewarray 分配数据成员类型为引用类型的新数组 arraylength 获取数组长度      
multianewarray 分配新的多维数组      
控制流      
条件分支指令      
ifeq 如果等于0，则跳转      
ifne 如果不等于0，则跳转      
iflt 如果小于0，则跳转      
ifge 如果大于等于0，则跳转      
ifgt 如果大于0，则跳转      
ifle 如果小于等于0，则跳转      
if_icmpcq 如果两个int值相等，则跳转      
if_icmpne 如果两个int类型值不相等，则跳转      
if_icmplt 如果一个int类型值小于另外一个int类型值，则跳转      

       if_icmpge 如果一个int类型值大于或者等于另外一个int类型值，则跳转 if_icmpgt 如果一个int类型值大于另外一个int类型值，则跳转 if_icmple 如果一个int类型值小于或者等于另外一个int类型值，则跳转 ifnull 如果等于null，则跳转      
ifnonnull 如果不等于null，则跳转      
if_acmpeq 如果两个对象引用相等，则跳转      
if_acmpnc 如果两个对象引用不相等，则跳转      
比较指令      
lcmp 比较long类型值      
fcmpl 比较float类型值(当遇到NaN时，返回-1) fcmpg 比较float类型值(当遇到NaN时，返回1)      
dcmpl 比较double类型值(当遇到NaN时，返回-1) dcmpg 比较double类型值(当遇到NaN时，返回1) 无条件转移指令      
goto 无条件跳转      
goto_w 无条件跳转(宽索引)      
表跳转指令      
tableswitch 通过索引访问跳转表，并跳转      
lookupswitch 通过键值匹配访问跳转表，并执行跳转操作 异常      
athrow 抛出异常或错误      
finally子句      
jsr 跳转到子例程      
jsr_w 跳转到子例程(宽索引)      
rct 从子例程返回      
方法调用与返回      
方法调用指令      
invokcvirtual 运行时按照对象的类来调用实例方法 invokespecial 根据编译时类型来调用实例方法 invokestatic 调用类(静态)方法      
invokcinterface 调用接口方法      
方法返回指令      
ireturn 从方法中返回int类型的数据      
lreturn 从方法中返回long类型的数据      
freturn 从方法中返回float类型的数据      
dreturn 从方法中返回double类型的数据      
areturn 从方法中返回引用类型的数据      
return 从方法中返回，返回值为void      

       线程同步      
montiorenter 进入并获取对象监视器      
monitorexit 释放并退出对象监视器      
JVM指令助记符 变量到操作数栈:iload,iload_,lload,lload_,fload,fload_,dload,dload_,aload,aload_ 操作数栈到变量: istore,istore_,lstore,lstore_,fstore,fstore_,dstore,dstor_,astore,astore_ 常数到操作数栈: bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_,lconst_,fconst_,dconst_ 加:iadd,ladd,fadd,dadd      
减:isub,lsub,fsub,dsub      
乘:imul,lmul,fmul,dmul      
除:idiv,ldiv,fdiv,ddiv      
余数:irem,lrem,frem,drem      
取负:ineg,lneg,fneg,dneg      
移位:ishl,lshr,iushr,lshl,lshr,lushr      
按位或:ior,lor      
按位与:iand,land      
按位异或:ixor,lxor      
类型转换:i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换) i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换)      
创建类实便:new      
创建新数组:newarray,anewarray,multianwarray 访问类的域和类实例域:getfield,putfield,getstatic,putstatic 把数据装载到操作数栈:baload,caload,saload,iaload,laload,faload,daload,aaload 从操作数栈存存储到数组: bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore 获取数组长度:arraylength      
检相类实例或数组属性:instanceof,checkcast 操作数栈管理:pop,pop2,dup,dup2,dup_xl,dup2_xl,dup_x2,dup2_x2,swap 有条件转移:ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene, if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl fcmpg,dcmpl,dcmpg      
复合条件转移:tableswitch,lookupswitch      
无条件转移:goto,goto_w,jsr,jsr_w,ret      
调度对象的实便方法:invokevirtual      
调用由接口实现的方法:invokeinterface      
调用需要特殊处理的实例方法:invokespecial      
       
调用命名类中的静态方法:invokestatic 方法返回:ireturn,lreturn,freturn,dreturn,areturn,return 异常:athrow      
finally关键字的实现使用:jsr,jsr_w,re      t