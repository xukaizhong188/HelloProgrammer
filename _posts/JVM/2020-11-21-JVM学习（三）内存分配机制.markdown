---
layout: post
title: JVM学习（三）内存分配机制
date:  2020-11-21
Author: XKZ
categories: jekyll update
tags: [JVM]
comments: true
---
# 一、JVM对象创建过程
![img](https://xukaizhong188.github.io/HelloProgrammer/images/2020-11-21/p8.png)
对象创建就是new一个对象，对应执行new指令。
### 1.1类加载检查
虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。
new指令对应到语言层面上讲是，new关键词、对象克隆、对象序列化等。
### 1.2分配内存
#### 划分多大的内存？
对象所需要的大小在加载的时候已经完全确定，为对象分配内存空间实际上就是需要将一块确定大小的空间从堆中划分出来
#### 如何划分？
##### 指针碰撞（默认方法）
如果Java堆内存是绝对规整的（规整的标准：所有用过的内存都放在一边，未用过的放在了另一边），在使用和未使用的空间中间有一个指针，作为指示器，那所分配的内存就是需要将这个指针向空闲区域挪动和对象大小相等的区域
##### 空闲列表
如果Java堆内存是非规整的，已使用的内存和未使用的内存是错乱的，这个时候就需要维护一个列表，记录那些内存块是可以用的，在分配的时候红列表中找到一块足够大的空间划分给对象。
#### 在并发情况下，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来争抢内存的情况，如何解决？
##### CAS
虚拟机会采用CAS+失败重试的方式来保证更新操作的原子性来对分配空间的动作进行同步处理。大家同时去抢同一个空间，谁抢到谁算
##### 本地线程分配缓存
把内存分配的动作按照线程划分在不同空间之间进行，也就是每个线程在Java堆中预先分配一块空间。Java8默认使用这种方式使用-XX:+/ -UseTLAB来设置是否使用TLAB    
­XX:TLABSize 指定TLAB大小。
### 1.3初始化
内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值(不包括对象头)， 如果使用TLAB，这一工作过程也 可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问 到这些字段的数据类型所对应的零值。
### 1.4设置对象头
![img](https://xukaizhong188.github.io/HelloProgrammer/images/2020-11-21/p9.png)
初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对 象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。   
在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域:对象头(Header)、 实例数据(Instance Data) 和对齐填充(Padding)。    
##### 对象头 
HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码(HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。      
对象头的另外一部分 是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。
# 二、对象头与指针
# 三、JVM对象内存分配
# 四、逃逸分析&栈上分配&标量替换
# 五、对象内存回收机制
# 六、日均百万级订单交易系统JVM参数设置实例