---
layout: post
title: 数据结构之栈!
date:  2020-08-24
Author: XKZ
categories: jekyll update
tags: [算法,数据结构]
comments: true
---
# 注意
源码请查看[源码](https://github.com/xukaizhong188/leetcode "源码")。
# 栈
## 一、描述
栈是一种基于后进先出（LIFO）策略的集合模型
## 二、优劣势
### 1、优点
栈的优点就是可以很快的找到我们感兴趣的元素，也就是栈顶元素
### 2、缺点
如果想获取最开始的元素，必须清空栈。
## 实现
### 1、Java源码分析

在Java中，JDK帮我们实现了栈java.util.Stack。     
Stack类继承了Vector类，而Vector类继承了AbstractList抽象类，实现了List接口，Cloneable接口，RandomAcces接口以及Serializable接口，需要指出的Vector内部还有两个内部类ListItr和Itr，Itr在继承Vector的同时实现了Iterator接口，而ListItr在继承了Itr类的同时实现了ListIterator接口。
![img](https://xukaizhong188.github.io/HelloProgrammer/images/2020-08-24/pic1.png)
#### 1.1、JDK提供的方法
首先先看下JDK中为我们提供的一些方法：

    /**
     * 无参的构造方法，创建一个空栈
     */
    public Stack() {
    }

    /**
     * 向栈顶压入一个元素
     */
    public E push(E item) {
    }

    /**
     * 移走栈顶对象，将该对象作为函数值返回
     */
    public synchronized E pop() {
    }

    /**
     * 查找栈顶对象，而不从栈中移走。
     */
    public synchronized E peek() {
    }

    /**
     * 判断栈是否为空.
     */
    public boolean empty() {
    }

    /**
     *  返回栈中对象的位置，从1开始。
     */
    public synchronized int search(Object o) {
    }

Stack类继承了Vector类。先看下Vector的属性

    /**
     * 用于保存Stack中的每个元素
     */
    protected Object[] elementData;
    /**
     * 用于动态的保存元素的个数，即实际元素个数
     */
    protected int elementCount;
    /**
     * 用来保存Stack的容量（一般情况下应该是大于elementCount）
     */
    protected int capacityIncrement;
    /**
     * 用来保存Stack的容量（一般情况下应该是大于elementCount）
     */
    protected transient int modCount = 0;

不难看出，栈实现了Vector类，也就代表着Stack的底层是通过数组来实现的。   
#### 1.2、push方法的实现（压栈的过程）

    public E push(E item) {
        //调用Vector的压栈方法
        addElement(item);
        return item;
    }
    public synchronized void addElement(E obj) {
        //使用modCount参数来实现Fail-Fast机制
        modCount++;
        //确保栈的容量大小不会使新增的数据溢出
        ensureCapacityHelper(elementCount + 1);
        //赋值
        elementData[elementCount++] = obj;
    }
    
    private void ensureCapacityHelper(int minCapacity) {
        // 防止溢出。如果超出数组的可容纳的长度，需要进行扩容操作
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }
    private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        //如果是Stack的话，数组扩展为原来的两倍
        int newCapacity = oldCapacity + ((capacityIncrement > 0) ?
                                         capacityIncrement : oldCapacity);
        //扩展数组后需要判断两次
        //第1次是新数组的容量是否比elementCount + 1的小（minCapacity;
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        //第2次是新数组的容量是否比指定最大限制Integer.MAX_VALUE - 8 大
        //如果大，则minCapacity过大，需要判断下
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        //拷贝数据
        elementData = Arrays.copyOf(elementData, newCapacity);
    }

    //检查容量的int值是不是已经溢出 
    private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }
    
#### 1.3、 peek方法查找栈顶对象，而不从栈中移走

    //查找栈顶对象，而不从栈中移走。
    public synchronized E peek() {
        int len = size();
        if (len == 0)
            throw new EmptyStackException();
        return elementAt(len - 1);
    }
    //Vector里的方法，获取实际栈里的元素个数
    public synchronized int size() {
        return elementCount;
    }
    public synchronized E elementAt(int index) {
        if (index >= elementCount) {
        //数组下标越界异常
            throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);
        }
    //返回数据下标为index的值
        return elementData(index);
    }
    
#### 1.4、 pop方法，移走栈顶对象，将该对象作为函数值返回

    //移走栈顶对象，将该对象作为函数值返回
    public synchronized E pop() {
        E obj;
        int len = size();
 
        obj = peek();
        //len-1的得到值就是数组最后一个数的下标
        removeElementAt(len - 1);
        return obj;
    }
    //Vector里的方法
    public synchronized void removeElementAt(int index) {
        modCount++;
        //数组下标越界异常出现的情况
        if (index >= elementCount) {
            throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);
        } else if (index < 0) {
            throw new ArrayIndexOutOfBoundsException(index);
        }
        //数组中index以后的元素个数，由于Stack调用的该方法，j始终为0
        int j = elementCount - index - 1;
        if (j > 0) {
        // 数组中index以后的元素，整体前移，（这个方法挺有用的！！）  
            System.arraycopy(elementData, index + 1, elementData, index, j);
        }
        elementCount--;
        elementData[elementCount] = null; /* to let gc do its work */
    }