---
layout: post
title: 排序算法（五）之快速排序!
date:  2019-08-17
Author: XKZ
categories: jekyll update
tags: [算法,排序]
comments: true
---
# 注意
此系列文章默认从小到大排序，源码请查看[源码](https://github.com/xukaizhong188/leetcode "源码")。
# 快速排序

## 一、算法描述及实现
快速排序：快速排序是通过一趟排序将待排数组分为独立的两个部分，其中一部分的数据都要比另一部分数据大，然后再按照这个规则分配对两个部分进行排序。    
首先，需要在待排的数组找到一个临界值，将比这个临界值大的数据放到临界值右侧，将比临界值小的数据放到临界值左侧。然后再对两部分重复此步骤。   
### 切分算法
快速排序的关键部分在于需要将临界值排定，那么就需要用到切分，切分的基本实现是首先我们要确定好一个临界值a[j]，然后从数组的左侧找到第一个大于a[j]的元素，再从数组的右侧找到第一个小于a[j]的元素。   
然后交换这两个元素的位置，知道两个指针相遇，此时，我们只需要将a[j]和左子数组的最后一个元素进行交换，或者和右子数组的第一个元素交换即可。
## 二、特点
### 1、优点
1、实现简单
2、原地排序（只需要一个很小的辅助栈）
### 2、缺点
在实现时需要非常小心才能避免性能问题
## 三、示例
    
    /**
     * 归并排序
     * @param numb 
     * @param lo
     * @param hi
     */
    private static void sort(int[] numb, int lo, int hi) {
        if (lo >= hi){
            return;
        }
        //找到临界值所在的索引
        int j = qifen(numb,lo,hi);
        sort(numb,lo,j-1);//对子数组左半部分进行排序
        sort(numb,j+1,hi);//对子数组右半边进行排序
    }

    /**
     * 切分算法找到临界值的索引
     * @param numb
     * @param lo
     * @param hi
     * @return
     */
    private static int qifen(int[] numb, int lo, int hi) {
        //定义左右两个指针
        int i = lo;
        int j = hi+1;
        //将numb[lo]作为临界值
        int tar = numb[lo];
        //注意++i的使用，所以在初始化的时候 i取lo,j取hi+1
        while (true){
            //找到左侧第一个大于tar的元素
            while (numb[++i] < tar){
                if (i == hi){
                    break;
                }
            }
            //找到右侧第一个小于tar的元素
            while (numb[--j] > tar) {
                if (j == lo){
                    break;
                }
            }
            //当两个指针相遇返回
            if (i >= j){
                break;
            }
            //交换i和j的两个元素
            int temp = numb[i];
            numb[i] = numb[j];
            numb[j] = temp;
        }
        //交换tar到目标位置
        numb[lo] = numb[j];
        numb[j] = tar;

        return j;
    }
    public static void main(String[] args) {
        int[] numb =  new int[100];
        for (int i = 0;i<numb.length;i++){
            numb[i] = (int) (Math.random()*(100));
        }
        for (int i = 0;i<numb.length;i++){
            System.out.println(numb[i]);
        }
        System.out.println("----------------------------");
        sort(numb,0,numb.length - 1);
        //选择排序
        //sort(numb);
        for (int i = 0;i<numb.length;i++){
            System.out.println(numb[i]);
        }
    }
