---
layout: post
title: 排序算法（四）之归并排序!
date:  2019-08-11
Author: XKZ
categories: jekyll update
tags: [算法,排序]
comments: true
---
# 注意
此系列文章默认从小到大排序
# 归并排序

## 一、算法描述及实现
归并：将两个有序的数组归并成一个更大的有序数组     
归并排序：对一个数组排序，可以先将他分为2半分别排序，然后将结果归并。
### 1、原地归并的抽象方法
实现归并的过程最简单的就是将两个有序的数组放在第三个数组中，但是这种方式会造成申请大量的额外空间。   
原地归并：在不使用额外空间的前提下完成归并。对于一个数组的左右两半部分都为有序将进行4次判断，在遍历时左边数据用尽时取右边数据；在右边数据用尽时取左边数据；当右边数据小于左边数据取右边数据；当右边数据大于等于左边数据取左边数据。 
以下方法为通过原地归并来实现2个有序数组的归并操作：
#### 示例：
     /**
      * 原地归并方法（在不使用额外的空间的情况下将numb进行排序）
      * @param numb  原数组:其中lo到mid为第一个有序数组，mid+1到hi为第二个有序数组
      * @param lo
      * @param mid
      * @param hi
      * @return
      */
     private static int[] merge(int[] numb, int lo, int mid, int hi) {
         int i = lo;
         int j = mid+1;
         //遍历数据
         int[]  numb2= new int[numb.length];
         for (int k = 0 ;k<numb.length;k++){
             numb2[k] = numb[k];
         }
         for (int k = lo; k<numb.length;k++){
 
             if (i > mid){
                 numb[k] = numb2[j++];
             }else if (j > hi){
                 numb[k] = numb2[i++];
             }else if (numb2[j] < numb2[i] ){
                 numb[k] = numb2[j++];
             }else {
                 numb[k] = numb2[i++];
             }
         }
         return numb;
     }

#### 注意：
在上述代码中会发现也使用了新创建的数组，但是这并不意味着我们新开辟了新的空间，这里只是将这种用法呈现给大家，这里新数组我们称为辅助数组，在后面的归并算法中我们会将待排序数组的一部分作为辅助数组而不是领开辟一块空间。
### 2、自顶向下的归并排序
实现自顶向下的归并排序是通过在原地归并的基础上通过递归来完成，这也是利用分治思想的一个典型案例。
#### 示例
    private static int[]  numb2;
    /**
     * 原地归并方法（在不使用额外的空间的情况下将numb进行排序）
     * @param numb  原数组:其中lo到mid为第一个有序数组，mid+1到hi为第二个有序数组
     * @param lo
     * @param mid
     * @param hi
     * @return
     */
    private static int[] merge(int[] numb, int lo, int mid, int hi) {
        //参考1、原地归并代码，这里主要区别就是将辅助数组设为公共变量
        int i = lo;
        int j = mid+1;
        //遍历数据
        //todo 辅助变量numb2作为公共变量，每次递归时不需要再次创建
        for (int k = 0 ;k<numb.length;k++){
            numb2[k] = numb[k];
        }
        ......
    }

    /**
     * 自顶向下的归并排序：在原地归并的基础上通过递归完成归并排序
     * @param numb
     * @param lo
     * @param hi
     * @return
     */
    private static void sort(int[] numb, int lo, int hi) {

        if (hi <= lo){
            return ;
        }
        int mid = lo+(hi - lo) / 2;
        sort(numb,lo,mid);//对左半边进行排序
        sort(numb,mid+1,hi);//对右半边进行排序
        merge(numb,lo,mid,hi);//原地归并处理
    }
    public static void main(String[] args) {
        int[] numb =  new int[]{1,3,5,2,4,6};
        numb2 = new int[numb.length];
        sort(numb,0,numb.length - 1);
        for (int i = 0;i<numb.length;i++){
            System.out.println(numb[i]);
        }
    }

#### 思考1：小规模数据使用递归的合理性
这里使用了递归来完成归并排序，但使用递归会使在小规模数据时的排序变得复杂，我们知道对于小估摸数据的排序，插入排序和选择排序效率会比较高，这里我们是否可以进行优化呢？
#### 思考2：假如部分数据是有序的怎么处理
例如在测试数据中我们num[mid]<num[mid+1],这样是否可以跳过merge来减少运行时间？
#### 思考3：如果不使用辅助数组该怎么办呢
实际我们并不能完全抛开辅助数组，在空间上无法实现，但是我们是否可以在时间上来减少对辅助数组的赋值呢？
#### 改进后的自顶向下归并排序
## 二、特点
主要优点：能够保证任意长度的Nshu数组的时间复杂度都是NlogN成正比：；
主要缺点：所需要的额外空间和N成正比
