---
layout: post
title: 排序算法（三）之希尔排序!
date:  2019-08-11
Author: XKZ
categories: jekyll update
tags: [算法,排序算法]
comments: true
---
# 注意
此系列文章默认从小到大排序，源码请查看[源码](https://github.com/xukaizhong188/leetcode "源码")。
# 希尔排序
## 一、算法描述
希尔排序：希尔排序是插入排序的改进，对于一个大规模的乱序数组来说插入排序的效率会非常慢，因为他只是一个一个移动相邻的元素。希尔排序是交换不相邻的元素来实现对数组的局部排序。    
增量：每个元素之间的间隔我们称之为增量   
希尔排序首先会定义一个增量d1，按照增量d1将数组分为n组，然后利用插入排序对这n组的元素进行排序，然后再将增量d1减少在进行分组排序，知道增量变为1。
## 二、特点
希尔排序更加高效的原因主要是权衡了子数组的规模及有序性，插入排序在规模较小且待排数组有序性不负责的时候进行。希尔排序在排序之初，子数组规模小且部分有序，这非常服务插入排序的特性。
## 三、示例
      /**
       * 希尔排序
       * @param numbs
       * @return
       */
      private static int[] sort(int[] numbs) {
          //增量d
          int d = numbs.length/2;
  
          while (d >= 1){
              //对子数组进行插入排序
              //遍历子数组
              int subNum = 0;
              while (subNum + d < numbs.length){
                  //对下标从subNum开始的子数组进行插入排序
                  for (int i= subNum;i<numbs.length;i+=d){
                      int tar = i;
                      //比较大小，找到最小值
                      for (int j = i-d ;j>=subNum;j-=d){
                          //如果目标值比当前值小交换位置
                          if (numbs[tar] <= numbs[j]){
                              //将最小值min和当前位置进行交换j
                              int tem = numbs[tar];
                              numbs[tar] = numbs[j];
                              numbs[j] = tem;
                          }else {
                              break;
                          }
                          tar = j;
                      }
                  }
                  subNum++;
              }
              d = d / 2;
          }
  
          return numbs;
      }

[参考：简单易懂图解](https://blog.csdn.net/qq_39207948/article/details/80006224 "参考简单易懂图解").
