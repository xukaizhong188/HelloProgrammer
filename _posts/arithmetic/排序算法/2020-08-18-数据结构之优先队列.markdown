---
layout: post
title: 数据结构之优先队列!
date:  2019-08-17
Author: XKZ
categories: jekyll update
tags: [算法,数据结构]
comments: true
---
# 注意
此系列文章默认从小到大排序，源码请查看[源码](https://github.com/xukaizhong188/leetcode "源码")。
# 优先队列
## 一、算法描述及实现
优先队列：在我们很多情况下处理的数据不一定要求全部有序，很多情况下我们只会处理当前数据中的最大的元素或者最小的元素，在这种情况下一个合理的数据结构就需要具备：删除最大（最小）元素和插入元素。这种数据结构就叫做优先队列。
### 1、初级实现
在队列较小的时，大量使用两种操作之一，或者是所操作元素的顺序已知时们可以使用有序或者无序的数组或者列表来实现。
#### 1.1、数组实现无序
##### 1.1.1、删除最大元素（待补充）
要实现删除最大元素我们可以添加一段类似于选择排序的内循环的代码将最大元素和边界元素交换然后来进行删除和栈的pop方法类似。同栈一样，我们可以加入调整数组大小的代码来保证数据结构中至少含有四分之一的元素而又不会溢出。
示例：

    //todo
##### 1.1.2、插入元素（待补充）
插入元素的方法类似于压栈的过程，
示例：

    //todo
#### 1.2、数组实现有序
此实现方法就是在插入的方法中将较大的元素向右移动，这样数组保持有序（同插入排序），保证了最大的元素在数组的一边，在删除最大元素的时候就和栈的pop方法一样了。
示例：

    //todo
    
#### 1.3、链表实现
可以基于链表下进行压栈作为基础，通过修改pop方法来找到并返回最大的元素，或者是修改pushfa方法来保证所有元素为逆序来删除并返回链表的首元素（也就是最大元素）。      
基于链表的实现无序序列主要来解决惰性问题，也就是我们仅在必要的时候才会找出最大元素，可以通过实现有序序列来解决积极问题，也就是在插入元素时保持列表有序来使后续的操作更加简便。     
示例

    //todo
## 二、特点
### 1、优点
### 2、缺点
## 三、示例
## 四、算法改进
