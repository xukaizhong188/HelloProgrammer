---
layout: post
title: 排序算法（二）之插入排序!
date:  2019-08-10
Author: XKZ
categories: jekyll update
tags: [算法,排序算法]
comments: true
---
# 注意
此系列文章默认从小到大排序，源码请查看[源码](https://github.com/xukaizhong188/leetcode "源码")。
# 插入排序
## 一、算法描述
插入排序：插入排序就是将目标值插入到已排好的数组中。将数组分为有序和无序两部分，将右面无序的数据和左面的有序数据进行对比插入到合适的位置之中。
## 二、特点
### 1、运行时间和输入有关
无论输入的数组是多么的复杂或者是多么简单，程序运行都会为了找到最小的元素而进行扫描，所以程序运行时间是一定的。
### 2、数据移动最少
每次数据的交换都是交换两个元素的位置，所以选择排序会使用n次交换，和数组的大小成线性关系。
## 三、时间复杂度
在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较N- 1次，时间复杂度为O(N) 。     
最坏的情况是待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为O(N^2)。    
平均来说，A[1..j-1]中的一半元素小于A[j]，一半元素大于A[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是输入规模的二次函数。    
## 四、空间复杂度
插入排序的空间复杂度为常数阶
## 五、示例
      private static int[] sort2(int[] numbs) {
          for (int i = 0;i<numbs.length;i++){
              int tar = i;
              //比较大小，找到最小值
              for (int j = i-1 ;j>0;j--){
                  //如果目标值比当前值小交换位置
                  if (numbs[tar] <= numbs[j]){
                      //将最小值min和当前位置进行交换j
                      int tem = numbs[tar];
                      numbs[tar] = numbs[j];
                      numbs[j] = tem;
                  }else {
                      break;
                  }
                  tar = j;
              }
          }
          return numbs;
      }
